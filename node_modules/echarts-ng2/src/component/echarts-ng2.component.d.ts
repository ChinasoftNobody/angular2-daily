import { ElementRef, EventEmitter, AfterViewInit, OnDestroy, NgZone } from '@angular/core';
import { EChartOption, ECharts } from './api';
export declare class EchartsNg2Component implements AfterViewInit, OnDestroy, ECharts {
    private el;
    private ngZone;
    private chart;
    private _option;
    private opts;
    private _group;
    private setGroup();
    theme: Object | string;
    option: EChartOption;
    style: any;
    group: string;
    onBeforeInit: EventEmitter<any>;
    onAfterInit: EventEmitter<any>;
    onOptionChange: EventEmitter<any>;
    host: any;
    constructor(el: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    init: () => void;
    dispose: () => void;
    setOption: (option: EChartOption, notMerge?: boolean, lazyUpdate?: boolean) => void;
    getWidth: () => number;
    getHeight: () => number;
    getDom: () => HTMLCanvasElement | HTMLDivElement;
    getOption: () => Object;
    resize: (opts?: {
        width?: string | number;
        height?: string | number;
        silent?: boolean;
    }) => void;
    dispatchAction: (payload: Object) => void;
    on: (eventName: string, handler: Function, context?: Object) => void;
    off: (eventName: string, handler?: Function) => void;
    convertToPixel: (finder: string | {
        seriesIndex?: number;
        seriesId?: string;
        seriesName?: string;
        geoIndex?: number;
        geoId?: string;
        geoName?: string;
        xAxisIndex?: number;
        xAxisId?: string;
        xAxisName?: string;
        yAxisIndex?: number;
        yAxisId?: string;
        yAxisName?: string;
        gridIndex?: number;
        gridId?: string;
        gridName?: string;
    }, value: string | any[]) => string | any[];
    convertFromPixel: (finder: string | {
        seriesIndex?: number;
        seriesId?: string;
        seriesName?: string;
        geoIndex?: number;
        geoId?: string;
        geoName?: string;
        xAxisIndex?: number;
        xAxisId?: string;
        xAxisName?: string;
        yAxisIndex?: number;
        yAxisId?: string;
        yAxisName?: string;
        gridIndex?: number;
        gridId?: string;
        gridName?: string;
    }, value: string | any[]) => string | any[];
    containPixel: (finder: string | {
        seriesIndex?: number;
        seriesId?: string;
        seriesName?: string;
        geoIndex?: number;
        geoId?: string;
        geoName?: string;
        xAxisIndex?: number;
        xAxisId?: string;
        xAxisName?: string;
        yAxisIndex?: number;
        yAxisId?: string;
        yAxisName?: string;
        gridIndex?: number;
        gridId?: string;
        gridName?: string;
    }, value: any[]) => boolean;
    showLoading: (type?: string, opts?: Object) => void;
    hideLoading: () => void;
    clear: () => void;
    isDisposed: () => boolean;
    connect: (group: string) => void;
    disconnect: (group: string) => void;
}
